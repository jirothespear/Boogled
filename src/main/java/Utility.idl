module Utility {
  interface ClientCallback {
    wstring startRound();
    void roundEnd( in wstring roundWinner , in long points);
    void gameFinish(in wstring gameWinner, in wstring points);
    unsigned long getScore(in long time);
    void getRoundTime(in long time);
    void getQueueTime(in long time);
    void getLetterChoice (in wstring letters);
  };

  exception LoginException {
    string reason;
  };

  exception LogoutException {
    string reason;
  };

  exception GameStartException {
      string reason;
  };

  exception InvalidWordException {
        string reason;
  };

  typedef sequence<wstring> playerLeaderboard;
   typedef sequence<long> playerLeaderboardPoints;

  interface PlayerUtility {
    void login(in wstring username, in wstring passwd) raises (LoginException);
    void userCallback(in ClientCallback clientCallback, in wstring username);
    void logout(in ClientCallback clientCallback, in wstring username) raises (LogoutException);
    wstring startGame(in wstring user) raises (GameStartException);
    void checkWord(in wstring answer, in wstring playerID, in wstring gameID) raises (InvalidWordException);
    long showScore(in wstring user, in wstring gameID);
    void getQueueTime(in wstring username);
    void getRoundTime(in wstring username, in wstring gameID);
    wstring getLetterChoice(in wstring gameID);
    wstring getGameID(in wstring username);
    wstring getRoundCount(in wstring gameID);
    playerLeaderboard getLeaderboardUsernames ();
    playerLeaderboardPoints getLeaderboardPoints ();

  };

};